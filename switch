#!/usr/bin/env bash

PLATFORM=github
PLATFORM_URL=github.com
ORG_NAME=
SAVE_ORG_NAME=0
REPO_NAME=
CONFIG_FILE=$HOME/.bryswitch


# create a config file if it doesn't exist
[ ! -f "$CONFIG_FILE" ] && touch "$CONFIG_FILE"

source $CONFIG_FILE

# help text
function usage {
  echo -e "Usage: switch [OPTIONS] <repo-name>"
  echo -e 
  echo -e "Switch to a specified git repository and clone if not found locally."
  echo -e 
  echo -e "Options:"
  echo -e "  -h,  --help             Show this help message and exit."
  echo -e "  -o,  --org string       Specify the organization the desired repo resides in."
  echo -e "  -O,  --org-save string  Same as -o but org name is persisted for future invocations."
  echo -e "  -gh, --github           Indicate that <repo-name> is a GitHub repository. Note: this is the default."
  echo -e "  -gl, --gitlab           Indicate that <repo-name> is a GitLab repository."
  echo -e 
  echo -e "Examples:"
  echo -e "  $ switch slack-action"
  echo -e "  $ switch --org facebook react"
  echo -e "  $ switch --org-save google gson"
  echo -e "  $ switch --gitlab --org-save fdroid fdroidclient"
}

# if no arguments
if [[ $# -eq 0 ]]; then
  echo "ERROR: missing repo-name"
  echo -e 
  usage
  return
fi

# specify and save organization name
function setOrg {
  local org_name=
  local save=${2:-0}

  # org provided via either param or persisted
  if [[ ! -z "$1" ]]; then
    org_name=$1

  # request
  else
    save=1
    printf "$PLATFORM org: "
    read org_name
  fi

  ORG_NAME=$(toLower $org_name)

  if [[ $save -eq 1 ]]; then
    echo "ORG_NAME=$ORG_NAME\nPLATFORM_URL=$PLATFORM_URL" > $CONFIG_FILE
    echo "$PLATFORM organization set to '$ORG_NAME'"
  fi
}

# function to clone and change directories
# $1 is repo name
function switchToRepo {
  DIR=~/dev/$PLATFORM_URL/$ORG_NAME/$1
  # clone repo if it doesn't exist locally
  [ ! -d $DIR ] && git clone git@$PLATFORM_URL:$ORG_NAME/$1.git $DIR
  # change to local repo directory if clone was successful or already exists
  echo "Switching to '$1'"
  [[ -d $DIR ]] && cd $DIR
}

# return lower case of input
function toLower {
  local lower=$(echo $1 | tr '[:upper:]' '[:lower:]')
  echo $lower
}

while [[ $# -gt 0 ]]
do
  key="$1"

  case $key in
    -h|--help)
    usage
    return
    ;;
    -o|--org)
    ORG_NAME=$2
    shift
    shift
    ;;
    -O|--org-save)
    ORG_NAME=$2
    SAVE_ORG_NAME=1
    shift
    shift
    ;;
    -gh|--github)
    PLATFORM=github
    PLATFORM_URL=github.com
    shift
    ;;
    -gl|--gitlab)
    PLATFORM=gitlab
    PLATFORM_URL=gitlab.com
    shift
    ;;
    *)
    REPO_NAME=$1
    shift
    ;;
  esac
done

setOrg "$ORG_NAME" "$SAVE_ORG_NAME"

switchToRepo "$REPO_NAME"

unset PLATFORM
unset PLATFORM_URL
unset ORG_NAME
unset SAVE_ORG_NAME
unset REPO_NAME
unset CONFIG_FILE
