#!/usr/bin/env bash

PLATFORM=github
PLATFORM_URL=github.com
ORG_NAME=
SAVE_ORG_NAME=0
REPO_NAME=
GROUP_HIERARCHY=""
CONFIG_FILE=$HOME/.bryswitch
DEBUG=0


# create a config file if it doesn't exist
[ ! -f "$CONFIG_FILE" ] && touch "$CONFIG_FILE"

source $CONFIG_FILE

# help text
function usage {
  echo -e "Usage: switch [OPTIONS] <repo-name>"
  echo -e 
  echo -e "Switch to a specified git repository and clone if not found locally."
  echo -e 
  echo -e "Options:"
  echo -e "  -h,  --help             Show this help message and exit."
  echo -e "  -o,  --org string       Specify the organization the desired repo resides in."
  echo -e "  -O,  --org-save string  Same as -o but org name is persisted for future invocations."
  echo -e "  -gh, --github           Indicate that <repo-name> is a GitHub repository. Note: this is the default."
  echo -e "  -gl, --gitlab           Indicate that <repo-name> is a GitLab repository."
  echo -e "  -g,  --group string     Specify a group hierarchy."
  echo -e 
  echo -e "Examples:"
  echo -e "  $ switch slack-action"
  echo -e "  $ switch --org facebook react"
  echo -e "  $ switch --org-save google gson"
  echo -e "  $ switch --gitlab --org-save fdroid fdroidclient"
  echo -e "  $ switch --gitlab --org gitlab-org --group charts knative"
}

# if no arguments
if [[ $# -eq 0 ]]; then
  echo "ERROR: missing repo-name"
  echo -e 
  usage
  return
fi

# specify and save organization name
function setOrg {
  local org_name=
  local save=${2:-0}

  # org provided via either param or persisted
  if [[ ! -z "$1" ]]; then
    org_name=$1

  # request
  else
    save=1
    printf "$PLATFORM org: "
    read org_name
  fi

  ORG_NAME=$(toLower $org_name)

  [[ $save -eq 1 ]] &&  echo "$PLATFORM organization set to '$ORG_NAME'"
}

# function to clone and change directories
# $1 is repo name
function switchToRepo {
  url=$1
  org=$2
  repo=$3
  heirarchy=$4
  dir=~/dev/$url/$org/$repo
  # clone repo if it doesn't exist locally
  [ ! -d $dir ] && clone $url $org $repo $dir $heirarchy
  cur_dir=$PWD
  real_path=$(realpath "$dir")
  if [[ "$cur_dir" == "$real_path" ]]; then
    echo "You're already here!"
  else
    echo "Switching to '$repo'"
    # change to local repo directory if clone was successful or already exists
    [[ -d $dir ]] && cd $dir
  fi
}

function clone {
  url=$1
  org=$2
  repo=$3
  dir=$4
  heirarchy=$5
  echo "cloning $repo..."
  # try to clone with the hierarchy first, then without if it fails
  if ! (git clone -q git@$url:$org/${heirarchy}$repo.git $dir) then
    if ! (git clone -q git@$url:$org/$repo.git $dir) then
      echo "$repo is not a valid repository name"
    else
      # if clone worked without the hierarchy then remove the stored value
      GROUP_HIERARCHY=""
    fi
  fi 
}

# save values to .bryswitch file
function persist {
  echo "ORG_NAME=$ORG_NAME\nPLATFORM_URL=$PLATFORM_URL\nGROUP_HIERARCHY=$GROUP_HIERARCHY" > $CONFIG_FILE
}

function realpath {
  shortpath=`eval echo "$1"`
  folder=$(dirname "$shortpath")
  echo $(cd "$folder"; pwd)/$(basename "$shortpath"); 
}

function debug {
  echo ""
  echo "Platform name: $PLATFORM"
  echo "Platform URL:  $PLATFORM_URL"
  echo "Org name:      $ORG_NAME"
  echo "Clone URL:     $PLATFORM_URL/$ORG_NAME/$REPO_NAME.git"
  echo "Clone to:      $HOME/dev/$PLATFORM_URL/$ORG_NAME/$REPO_NAME"
}

# return lower case of input
function toLower {
  local lower=$(echo $1 | tr '[:upper:]' '[:lower:]')
  echo $lower
}

while [[ $# -gt 0 ]]
do
  key="$1"

  case $key in
    -h|--help)
    usage
    return
    ;;
    -o|--org)
    ORG_NAME=$2
    shift
    shift
    ;;
    -O|--org-save)
    ORG_NAME=$2
    SAVE_ORG_NAME=1
    shift
    shift
    ;;
    -gh|--github)
    PLATFORM=github
    PLATFORM_URL=github.com
    shift
    ;;
    -gl|--gitlab)
    PLATFORM=gitlab
    PLATFORM_URL=gitlab.com
    shift
    ;;
    -g|--group)
    GROUP_HIERARCHY="$2/"
    shift
    ;;
    --debug)
    DEBUG=1
    shift
    ;;
    *)
    REPO_NAME=$1
    shift
    ;;
  esac
done

setOrg "$ORG_NAME" "$SAVE_ORG_NAME"

switchToRepo "$PLATFORM_URL" "$ORG_NAME" "$REPO_NAME" "$GROUP_HIERARCHY"

persist

[[ $DEBUG -eq 1 ]] && debug


unset PLATFORM
unset PLATFORM_URL
unset ORG_NAME
unset SAVE_ORG_NAME
unset REPO_NAME
unset CONFIG_FILE
unset GROUP_HIERARCHY
unset DEBUG
